-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity two_complement_adder_two_complement_adder_Pipeline_VITIS_LOOP_8_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_load : IN STD_LOGIC_VECTOR (7 downto 0);
    b_load : IN STD_LOGIC_VECTOR (7 downto 0);
    temp_sum_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    temp_sum_ce0 : OUT STD_LOGIC;
    temp_sum_we0 : OUT STD_LOGIC;
    temp_sum_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    carry_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    carry_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of two_complement_adder_two_complement_adder_Pipeline_VITIS_LOOP_8_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal tmp_fu_97_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal carry_reg_78 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_carry_phi_fu_81_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal zext_ln8_fu_105_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_42 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln8_fu_169_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_fu_110_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln9_fu_114_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln9_fu_118_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln9_1_fu_128_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_1_fu_124_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln9_2_fu_134_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln9_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_1_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component two_complement_adder_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component two_complement_adder_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((tmp_fu_97_p3 = ap_const_lv1_0)) then 
                    i_fu_42 <= add_ln8_fu_169_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_42 <= ap_const_lv4_7;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_97_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                carry_reg_78 <= carry_1_fu_163_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln8_fu_169_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv4_F));
    and_ln11_1_fu_157_p2 <= (xor_ln9_fu_138_p2 and ap_phi_mux_carry_phi_fu_81_p4);
    and_ln11_fu_151_p2 <= (trunc_ln9_2_fu_134_p1 and trunc_ln9_1_fu_124_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_97_p3)
    begin
        if (((tmp_fu_97_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_carry_phi_fu_81_p4_assign_proc : process(ap_CS_fsm_state1, carry_reg_78, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_carry_phi_fu_81_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_carry_phi_fu_81_p4 <= carry_reg_78;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, i_fu_42)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv4_7;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_42;
        end if; 
    end process;

    carry_1_fu_163_p2 <= (and_ln11_fu_151_p2 or and_ln11_1_fu_157_p2);
    carry_out <= ap_phi_mux_carry_phi_fu_81_p4;

    carry_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_97_p3)
    begin
        if (((tmp_fu_97_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            carry_out_ap_vld <= ap_const_logic_1;
        else 
            carry_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln9_1_fu_128_p2 <= std_logic_vector(shift_right(unsigned(b_load),to_integer(unsigned('0' & zext_ln9_fu_114_p1(8-1 downto 0)))));
    lshr_ln9_fu_118_p2 <= std_logic_vector(shift_right(unsigned(a_load),to_integer(unsigned('0' & zext_ln9_fu_114_p1(8-1 downto 0)))));
    temp_sum_address0 <= zext_ln8_fu_105_p1(4 - 1 downto 0);

    temp_sum_ce0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            temp_sum_ce0 <= ap_const_logic_1;
        else 
            temp_sum_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_sum_d0 <= (xor_ln9_fu_138_p2 xor ap_phi_mux_carry_phi_fu_81_p4);

    temp_sum_we0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, tmp_fu_97_p3)
    begin
        if (((tmp_fu_97_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            temp_sum_we0 <= ap_const_logic_1;
        else 
            temp_sum_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_97_p3 <= ap_sig_allocacmp_i_2(3 downto 3);
    trunc_ln9_1_fu_124_p1 <= lshr_ln9_fu_118_p2(1 - 1 downto 0);
    trunc_ln9_2_fu_134_p1 <= lshr_ln9_1_fu_128_p2(1 - 1 downto 0);
    trunc_ln9_fu_110_p1 <= ap_sig_allocacmp_i_2(3 - 1 downto 0);
    xor_ln9_fu_138_p2 <= (trunc_ln9_2_fu_134_p1 xor trunc_ln9_1_fu_124_p1);
    zext_ln8_fu_105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_2),64));
    zext_ln9_fu_114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln9_fu_110_p1),8));
end behav;
