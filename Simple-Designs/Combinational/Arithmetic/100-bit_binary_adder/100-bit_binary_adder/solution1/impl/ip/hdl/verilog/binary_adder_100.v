// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="binary_adder_100_binary_adder_100,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.144021,HLS_SYN_LAT=102,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=111,HLS_SYN_LUT=1685,HLS_VERSION=2023_2}" *)

module binary_adder_100 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        b,
        carry_in,
        sum_i,
        sum_o,
        sum_o_ap_vld,
        carry_out,
        carry_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [99:0] a;
input  [99:0] b;
input  [0:0] carry_in;
input  [99:0] sum_i;
output  [99:0] sum_o;
output   sum_o_ap_vld;
output  [0:0] carry_out;
output   carry_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sum_o_ap_vld;
reg carry_out_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] or_ln8_fu_221_p2;
wire    ap_CS_fsm_state2;
reg   [0:0] empty_6_reg_102;
wire   [0:0] icmp_ln5_fu_126_p2;
reg   [6:0] i_fu_56;
wire   [6:0] add_ln5_fu_132_p2;
reg   [99:0] empty_fu_60;
wire   [99:0] or_ln7_fu_203_p2;
wire    ap_CS_fsm_state3;
wire   [99:0] zext_ln6_fu_141_p1;
wire   [99:0] lshr_ln6_fu_145_p2;
wire   [99:0] lshr_ln6_1_fu_154_p2;
wire   [0:0] trunc_ln6_fu_150_p1;
wire   [0:0] trunc_ln6_1_fu_159_p1;
wire   [0:0] xor_ln6_fu_163_p2;
wire   [0:0] bit_sum_fu_169_p2;
wire   [99:0] zext_ln7_fu_181_p1;
wire   [99:0] shl_ln7_fu_175_p2;
wire   [99:0] xor_ln7_fu_191_p2;
wire   [99:0] shl_ln7_1_fu_185_p2;
wire   [99:0] and_ln7_fu_197_p2;
wire   [0:0] and_ln8_1_fu_215_p2;
wire   [0:0] and_ln8_fu_209_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 i_fu_56 = 7'd0;
#0 empty_fu_60 = 100'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_6_reg_102 <= carry_in;
    end else if (((icmp_ln5_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_6_reg_102 <= or_ln8_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_fu_60 <= sum_i;
    end else if (((icmp_ln5_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_fu_60 <= or_ln7_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_56 <= 7'd0;
    end else if (((icmp_ln5_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_56 <= add_ln5_fu_132_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        carry_out_ap_vld = 1'b1;
    end else begin
        carry_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_o_ap_vld = 1'b1;
    end else begin
        sum_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln5_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln5_fu_132_p2 = (i_fu_56 + 7'd1);

assign and_ln7_fu_197_p2 = (xor_ln7_fu_191_p2 & empty_fu_60);

assign and_ln8_1_fu_215_p2 = (xor_ln6_fu_163_p2 & empty_6_reg_102);

assign and_ln8_fu_209_p2 = (trunc_ln6_fu_150_p1 & trunc_ln6_1_fu_159_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign bit_sum_fu_169_p2 = (xor_ln6_fu_163_p2 ^ empty_6_reg_102);

assign carry_out = empty_6_reg_102;

assign icmp_ln5_fu_126_p2 = ((i_fu_56 == 7'd100) ? 1'b1 : 1'b0);

assign lshr_ln6_1_fu_154_p2 = b >> zext_ln6_fu_141_p1;

assign lshr_ln6_fu_145_p2 = a >> zext_ln6_fu_141_p1;

assign or_ln7_fu_203_p2 = (shl_ln7_1_fu_185_p2 | and_ln7_fu_197_p2);

assign or_ln8_fu_221_p2 = (and_ln8_fu_209_p2 | and_ln8_1_fu_215_p2);

assign shl_ln7_1_fu_185_p2 = zext_ln7_fu_181_p1 << zext_ln6_fu_141_p1;

assign shl_ln7_fu_175_p2 = 100'd1 << zext_ln6_fu_141_p1;

assign sum_o = empty_fu_60;

assign trunc_ln6_1_fu_159_p1 = lshr_ln6_1_fu_154_p2[0:0];

assign trunc_ln6_fu_150_p1 = lshr_ln6_fu_145_p2[0:0];

assign xor_ln6_fu_163_p2 = (trunc_ln6_fu_150_p1 ^ trunc_ln6_1_fu_159_p1);

assign xor_ln7_fu_191_p2 = (shl_ln7_fu_175_p2 ^ 100'd1267650600228229401496703205375);

assign zext_ln6_fu_141_p1 = i_fu_56;

assign zext_ln7_fu_181_p1 = bit_sum_fu_169_p2;

endmodule //binary_adder_100
