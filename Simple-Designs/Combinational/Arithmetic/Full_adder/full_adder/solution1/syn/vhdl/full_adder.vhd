-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity full_adder is
port (
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a : IN STD_LOGIC_VECTOR (0 downto 0);
    b : IN STD_LOGIC_VECTOR (0 downto 0);
    carry_in : IN STD_LOGIC_VECTOR (0 downto 0);
    sum : OUT STD_LOGIC_VECTOR (0 downto 0);
    sum_ap_vld : OUT STD_LOGIC;
    carry_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    carry_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of full_adder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "full_adder_full_adder,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.296000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=10,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal xor_ln4_fu_62_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln5_1_fu_81_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln5_fu_75_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin



    and_ln5_1_fu_81_p2 <= (xor_ln4_fu_62_p2 and carry_in);
    and_ln5_fu_75_p2 <= (b and a);
    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;
    carry_out <= (and_ln5_fu_75_p2 or and_ln5_1_fu_81_p2);

    carry_out_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            carry_out_ap_vld <= ap_const_logic_1;
        else 
            carry_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sum <= (xor_ln4_fu_62_p2 xor carry_in);

    sum_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            sum_ap_vld <= ap_const_logic_1;
        else 
            sum_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln4_fu_62_p2 <= (b xor a);
end behav;
