// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="two_full_adders_cascaded_two_full_adders_cascaded,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.296000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=14,HLS_VERSION=2023_2}" *)

module two_full_adders_cascaded (
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        y,
        cout,
        cout_ap_vld,
        sum_i,
        sum_o,
        sum_o_ap_vld
);


input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] x;
input  [3:0] y;
output  [0:0] cout;
output   cout_ap_vld;
input  [3:0] sum_i;
output  [3:0] sum_o;
output   sum_o_ap_vld;

reg cout_ap_vld;
reg sum_o_ap_vld;

wire   [0:0] trunc_ln6_fu_74_p1;
wire   [0:0] trunc_ln6_1_fu_78_p1;
wire   [0:0] tmp_1_fu_104_p3;
wire   [0:0] tmp_2_fu_112_p3;
wire   [0:0] xor_ln4_1_fu_120_p2;
wire   [0:0] cout0_fu_98_p2;
wire   [1:0] tmp_fu_88_p4;
wire   [0:0] xor_ln4_2_fu_126_p2;
wire   [0:0] xor_ln4_fu_82_p2;
wire   [0:0] and_ln5_1_fu_149_p2;
wire   [0:0] and_ln5_fu_143_p2;
wire    ap_ce_reg;

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        cout_ap_vld = 1'b1;
    end else begin
        cout_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        sum_o_ap_vld = 1'b1;
    end else begin
        sum_o_ap_vld = 1'b0;
    end
end

assign and_ln5_1_fu_149_p2 = (xor_ln4_1_fu_120_p2 & cout0_fu_98_p2);

assign and_ln5_fu_143_p2 = (tmp_2_fu_112_p3 & tmp_1_fu_104_p3);

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

assign cout = (and_ln5_fu_143_p2 | and_ln5_1_fu_149_p2);

assign cout0_fu_98_p2 = (trunc_ln6_fu_74_p1 & trunc_ln6_1_fu_78_p1);

assign sum_o = {{{tmp_fu_88_p4}, {xor_ln4_2_fu_126_p2}}, {xor_ln4_fu_82_p2}};

assign tmp_1_fu_104_p3 = x[32'd1];

assign tmp_2_fu_112_p3 = y[32'd1];

assign tmp_fu_88_p4 = {{sum_i[3:2]}};

assign trunc_ln6_1_fu_78_p1 = y[0:0];

assign trunc_ln6_fu_74_p1 = x[0:0];

assign xor_ln4_1_fu_120_p2 = (tmp_2_fu_112_p3 ^ tmp_1_fu_104_p3);

assign xor_ln4_2_fu_126_p2 = (xor_ln4_1_fu_120_p2 ^ cout0_fu_98_p2);

assign xor_ln4_fu_82_p2 = (trunc_ln6_fu_74_p1 ^ trunc_ln6_1_fu_78_p1);

endmodule //two_full_adders_cascaded
