-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity two_full_adders_cascaded is
port (
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (3 downto 0);
    y : IN STD_LOGIC_VECTOR (3 downto 0);
    cout : OUT STD_LOGIC_VECTOR (0 downto 0);
    cout_ap_vld : OUT STD_LOGIC;
    sum_i : IN STD_LOGIC_VECTOR (3 downto 0);
    sum_o : OUT STD_LOGIC_VECTOR (3 downto 0);
    sum_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of two_full_adders_cascaded is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "two_full_adders_cascaded_two_full_adders_cascaded,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.296000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=14,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal trunc_ln6_fu_74_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln6_1_fu_78_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_104_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_112_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln4_1_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cout0_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_88_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln4_2_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln4_fu_82_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln5_1_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln5_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin



    and_ln5_1_fu_149_p2 <= (xor_ln4_1_fu_120_p2 and cout0_fu_98_p2);
    and_ln5_fu_143_p2 <= (tmp_2_fu_112_p3 and tmp_1_fu_104_p3);
    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;
    cout <= (and_ln5_fu_143_p2 or and_ln5_1_fu_149_p2);
    cout0_fu_98_p2 <= (trunc_ln6_fu_74_p1 and trunc_ln6_1_fu_78_p1);

    cout_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            cout_ap_vld <= ap_const_logic_1;
        else 
            cout_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sum_o <= ((tmp_fu_88_p4 & xor_ln4_2_fu_126_p2) & xor_ln4_fu_82_p2);

    sum_o_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            sum_o_ap_vld <= ap_const_logic_1;
        else 
            sum_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_104_p3 <= x(1 downto 1);
    tmp_2_fu_112_p3 <= y(1 downto 1);
    tmp_fu_88_p4 <= sum_i(3 downto 2);
    trunc_ln6_1_fu_78_p1 <= y(1 - 1 downto 0);
    trunc_ln6_fu_74_p1 <= x(1 - 1 downto 0);
    xor_ln4_1_fu_120_p2 <= (tmp_2_fu_112_p3 xor tmp_1_fu_104_p3);
    xor_ln4_2_fu_126_p2 <= (xor_ln4_1_fu_120_p2 xor cout0_fu_98_p2);
    xor_ln4_fu_82_p2 <= (trunc_ln6_fu_74_p1 xor trunc_ln6_1_fu_78_p1);
end behav;
