-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bcd_4_digit_adder_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    icmp_ln8 : IN STD_LOGIC_VECTOR (0 downto 0);
    or_ln : IN STD_LOGIC_VECTOR (127 downto 0);
    a_load : IN STD_LOGIC_VECTOR (127 downto 0);
    b_load : IN STD_LOGIC_VECTOR (127 downto 0);
    cout_tmp_3_015_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    cout_tmp_3_015_out_ap_vld : OUT STD_LOGIC;
    p_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    p_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of bcd_4_digit_adder_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_FFFFFFF6 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111110110";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln26_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal cin_assign_reg_108 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal cout_tmp_3_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal cout_tmp_3_015_fu_58 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal select_ln8_fu_212_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_62 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln26_fu_268_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_66 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal or_ln16_fu_262_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln56_fu_142_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_146_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln27_fu_154_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln27_fu_158_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln27_1_fu_167_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln27_fu_163_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln5_fu_176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln5_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln27_1_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln8_fu_198_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_204_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln12_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_1_fu_226_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln16_fu_240_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln16_fu_234_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln16_fu_250_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln16_1_fu_244_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln16_fu_256_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_244 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component bcd_4_digit_adder_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component bcd_4_digit_adder_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    cin_assign_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_244)) then 
                    cin_assign_reg_108 <= cout_tmp_3_fu_192_p2;
                elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    cin_assign_reg_108 <= icmp_ln8;
                end if;
            end if; 
        end if;
    end process;

    empty_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_fu_66 <= or_ln;
                elsif (((icmp_ln26_fu_130_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_fu_66 <= or_ln16_fu_262_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_62 <= ap_const_lv3_1;
                elsif (((icmp_ln26_fu_130_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_62 <= add_ln26_fu_268_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_130_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cout_tmp_3_015_fu_58 <= select_ln8_fu_212_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln12_fu_220_p2 <= std_logic_vector(unsigned(temp_sum_fu_186_p2) + unsigned(ap_const_lv32_FFFFFFF6));
    add_ln26_fu_268_p2 <= std_logic_vector(unsigned(i_fu_62) + unsigned(ap_const_lv3_1));
    add_ln5_fu_180_p2 <= std_logic_vector(unsigned(trunc_ln27_fu_163_p1) + unsigned(zext_ln5_fu_176_p1));
    add_ln8_fu_198_p2 <= std_logic_vector(unsigned(trunc_ln56_fu_142_p1) + unsigned(ap_const_lv2_3));
    and_ln16_fu_256_p2 <= (xor_ln16_fu_250_p2 and empty_fu_66);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_244_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln26_fu_130_p2, ap_block_pp0_stage0_11001)
    begin
                ap_condition_244 <= ((icmp_ln26_fu_130_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln26_fu_130_p2)
    begin
        if (((icmp_ln26_fu_130_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    cout_tmp_3_015_out <= cout_tmp_3_015_fu_58;

    cout_tmp_3_015_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln26_fu_130_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln26_fu_130_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cout_tmp_3_015_out_ap_vld <= ap_const_logic_1;
        else 
            cout_tmp_3_015_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    cout_tmp_3_fu_192_p2 <= "1" when (unsigned(temp_sum_fu_186_p2) > unsigned(ap_const_lv32_9)) else "0";
    icmp_ln26_fu_130_p2 <= "1" when (i_fu_62 = ap_const_lv3_4) else "0";
    lshr_ln27_1_fu_167_p2 <= std_logic_vector(shift_right(unsigned(b_load),to_integer(unsigned('0' & zext_ln27_fu_154_p1(31-1 downto 0)))));
    lshr_ln27_fu_158_p2 <= std_logic_vector(shift_right(unsigned(a_load),to_integer(unsigned('0' & zext_ln27_fu_154_p1(31-1 downto 0)))));
    or_ln16_fu_262_p2 <= (shl_ln16_1_fu_244_p2 or and_ln16_fu_256_p2);
    p_out <= empty_fu_66;

    p_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln26_fu_130_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln26_fu_130_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln8_fu_212_p3 <= 
        cout_tmp_3_fu_192_p2 when (tmp_fu_204_p3(0) = '1') else 
        cout_tmp_3_015_fu_58;
    shl_ln16_1_fu_244_p2 <= std_logic_vector(shift_left(unsigned(zext_ln16_fu_240_p1),to_integer(unsigned('0' & zext_ln27_fu_154_p1(31-1 downto 0)))));
    shl_ln16_fu_234_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln27_fu_154_p1(31-1 downto 0)))));
    shl_ln_fu_146_p3 <= (trunc_ln56_fu_142_p1 & ap_const_lv5_0);
    temp_sum_1_fu_226_p3 <= 
        add_ln12_fu_220_p2 when (cout_tmp_3_fu_192_p2(0) = '1') else 
        temp_sum_fu_186_p2;
    temp_sum_fu_186_p2 <= std_logic_vector(unsigned(add_ln5_fu_180_p2) + unsigned(trunc_ln27_1_fu_172_p1));
    tmp_fu_204_p3 <= add_ln8_fu_198_p2(1 downto 1);
    trunc_ln27_1_fu_172_p1 <= lshr_ln27_1_fu_167_p2(32 - 1 downto 0);
    trunc_ln27_fu_163_p1 <= lshr_ln27_fu_158_p2(32 - 1 downto 0);
    trunc_ln56_fu_142_p1 <= i_fu_62(2 - 1 downto 0);
    xor_ln16_fu_250_p2 <= (shl_ln16_fu_234_p2 xor ap_const_lv128_lc_3);
    zext_ln16_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_sum_1_fu_226_p3),128));
    zext_ln27_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_146_p3),128));
    zext_ln5_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cin_assign_reg_108),32));
end behav;
