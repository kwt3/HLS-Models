-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bcd_4_digit_adder is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a : IN STD_LOGIC_VECTOR (127 downto 0);
    b : IN STD_LOGIC_VECTOR (127 downto 0);
    cin : IN STD_LOGIC_VECTOR (0 downto 0);
    cout : OUT STD_LOGIC_VECTOR (0 downto 0);
    cout_ap_vld : OUT STD_LOGIC;
    sum_i : IN STD_LOGIC_VECTOR (127 downto 0);
    sum_o : OUT STD_LOGIC_VECTOR (127 downto 0);
    sum_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of bcd_4_digit_adder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bcd_4_digit_adder_bcd_4_digit_adder,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.525667,HLS_SYN_LAT=7,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=269,HLS_SYN_LUT=2526,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_FFFFFFF6 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111110110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln8_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_202 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_163_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal or_ln_reg_207 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_start : STD_LOGIC;
    signal grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_done : STD_LOGIC;
    signal grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_idle : STD_LOGIC;
    signal grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_ready : STD_LOGIC;
    signal grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_cout_tmp_3_015_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_cout_tmp_3_015_out_ap_vld : STD_LOGIC;
    signal grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_p_out : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_p_out_ap_vld : STD_LOGIC;
    signal grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln23_1_fu_112_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln5_fu_116_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln5_fu_120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln23_fu_108_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_sum_fu_126_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln12_fu_139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_153_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal temp_sum_2_fu_145_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component bcd_4_digit_adder_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        icmp_ln8 : IN STD_LOGIC_VECTOR (0 downto 0);
        or_ln : IN STD_LOGIC_VECTOR (127 downto 0);
        a_load : IN STD_LOGIC_VECTOR (127 downto 0);
        b_load : IN STD_LOGIC_VECTOR (127 downto 0);
        cout_tmp_3_015_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        cout_tmp_3_015_out_ap_vld : OUT STD_LOGIC;
        p_out : OUT STD_LOGIC_VECTOR (127 downto 0);
        p_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96 : component bcd_4_digit_adder_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_start,
        ap_done => grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_done,
        ap_idle => grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_idle,
        ap_ready => grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_ready,
        icmp_ln8 => icmp_ln8_reg_202,
        or_ln => or_ln_reg_207,
        a_load => a,
        b_load => b,
        cout_tmp_3_015_out => grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_cout_tmp_3_015_out,
        cout_tmp_3_015_out_ap_vld => grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_cout_tmp_3_015_out_ap_vld,
        p_out => grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_p_out,
        p_out_ap_vld => grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_p_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_ready = ap_const_logic_1)) then 
                    grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln8_reg_202 <= icmp_ln8_fu_132_p2;
                or_ln_reg_207 <= or_ln_fu_163_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln12_fu_139_p2 <= std_logic_vector(unsigned(temp_sum_fu_126_p2) + unsigned(ap_const_lv32_FFFFFFF6));
    add_ln5_fu_120_p2 <= std_logic_vector(unsigned(trunc_ln23_1_fu_112_p1) + unsigned(zext_ln5_fu_116_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_done)
    begin
        if ((grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cout <= grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_cout_tmp_3_015_out;

    cout_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cout_ap_vld <= ap_const_logic_1;
        else 
            cout_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_start <= grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_start_reg;
    icmp_ln8_fu_132_p2 <= "1" when (unsigned(temp_sum_fu_126_p2) > unsigned(ap_const_lv32_9)) else "0";
    or_ln_fu_163_p3 <= (tmp_fu_153_p4 & temp_sum_2_fu_145_p3);
    sum_o <= grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_p_out;

    sum_o_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sum_o_ap_vld <= ap_const_logic_1;
        else 
            sum_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_sum_2_fu_145_p3 <= 
        add_ln12_fu_139_p2 when (icmp_ln8_fu_132_p2(0) = '1') else 
        temp_sum_fu_126_p2;
    temp_sum_fu_126_p2 <= std_logic_vector(unsigned(add_ln5_fu_120_p2) + unsigned(trunc_ln23_fu_108_p1));
    tmp_fu_153_p4 <= sum_i(127 downto 32);
    trunc_ln23_1_fu_112_p1 <= b(32 - 1 downto 0);
    trunc_ln23_fu_108_p1 <= a(32 - 1 downto 0);
    zext_ln5_fu_116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cin),32));
end behav;
