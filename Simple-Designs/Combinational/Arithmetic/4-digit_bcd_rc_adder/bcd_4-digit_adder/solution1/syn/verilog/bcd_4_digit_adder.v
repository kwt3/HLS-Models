// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bcd_4_digit_adder_bcd_4_digit_adder,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.525667,HLS_SYN_LAT=7,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=269,HLS_SYN_LUT=2526,HLS_VERSION=2023_2}" *)

module bcd_4_digit_adder (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        b,
        cin,
        cout,
        cout_ap_vld,
        sum_i,
        sum_o,
        sum_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] a;
input  [127:0] b;
input  [0:0] cin;
output  [0:0] cout;
output   cout_ap_vld;
input  [127:0] sum_i;
output  [127:0] sum_o;
output   sum_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cout_ap_vld;
reg sum_o_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln8_fu_132_p2;
reg   [0:0] icmp_ln8_reg_202;
wire   [127:0] or_ln_fu_163_p3;
reg   [127:0] or_ln_reg_207;
wire    grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_start;
wire    grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_done;
wire    grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_idle;
wire    grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_ready;
wire   [0:0] grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_cout_tmp_3_015_out;
wire    grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_cout_tmp_3_015_out_ap_vld;
wire   [127:0] grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_p_out;
wire    grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_p_out_ap_vld;
reg    grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [31:0] trunc_ln23_1_fu_112_p1;
wire   [31:0] zext_ln5_fu_116_p1;
wire   [31:0] add_ln5_fu_120_p2;
wire   [31:0] trunc_ln23_fu_108_p1;
wire   [31:0] temp_sum_fu_126_p2;
wire   [31:0] add_ln12_fu_139_p2;
wire   [95:0] tmp_fu_153_p4;
wire   [31:0] temp_sum_2_fu_145_p3;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_start_reg = 1'b0;
end

bcd_4_digit_adder_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1 grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_start),
    .ap_done(grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_done),
    .ap_idle(grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_idle),
    .ap_ready(grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_ready),
    .icmp_ln8(icmp_ln8_reg_202),
    .or_ln(or_ln_reg_207),
    .a_load(a),
    .b_load(b),
    .cout_tmp_3_015_out(grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_cout_tmp_3_015_out),
    .cout_tmp_3_015_out_ap_vld(grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_cout_tmp_3_015_out_ap_vld),
    .p_out(grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_p_out),
    .p_out_ap_vld(grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_p_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_start_reg <= 1'b1;
        end else if ((grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_ready == 1'b1)) begin
            grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln8_reg_202 <= icmp_ln8_fu_132_p2;
        or_ln_reg_207 <= or_ln_fu_163_p3;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cout_ap_vld = 1'b1;
    end else begin
        cout_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_o_ap_vld = 1'b1;
    end else begin
        sum_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_fu_139_p2 = ($signed(temp_sum_fu_126_p2) + $signed(32'd4294967286));

assign add_ln5_fu_120_p2 = (trunc_ln23_1_fu_112_p1 + zext_ln5_fu_116_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign cout = grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_cout_tmp_3_015_out;

assign grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_start = grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_ap_start_reg;

assign icmp_ln8_fu_132_p2 = ((temp_sum_fu_126_p2 > 32'd9) ? 1'b1 : 1'b0);

assign or_ln_fu_163_p3 = {{tmp_fu_153_p4}, {temp_sum_2_fu_145_p3}};

assign sum_o = grp_bcd_4_digit_adder_Pipeline_VITIS_LOOP_26_1_fu_96_p_out;

assign temp_sum_2_fu_145_p3 = ((icmp_ln8_fu_132_p2[0:0] == 1'b1) ? add_ln12_fu_139_p2 : temp_sum_fu_126_p2);

assign temp_sum_fu_126_p2 = (add_ln5_fu_120_p2 + trunc_ln23_fu_108_p1);

assign tmp_fu_153_p4 = {{sum_i[127:32]}};

assign trunc_ln23_1_fu_112_p1 = b[31:0];

assign trunc_ln23_fu_108_p1 = a[31:0];

assign zext_ln5_fu_116_p1 = cin;

endmodule //bcd_4_digit_adder
