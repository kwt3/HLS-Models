-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ripple_carry_adder is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a : IN STD_LOGIC_VECTOR (2 downto 0);
    b : IN STD_LOGIC_VECTOR (2 downto 0);
    carry_in : IN STD_LOGIC_VECTOR (0 downto 0);
    sum_i : IN STD_LOGIC_VECTOR (2 downto 0);
    sum_o : OUT STD_LOGIC_VECTOR (2 downto 0);
    sum_o_ap_vld : OUT STD_LOGIC;
    carry_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    carry_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of ripple_carry_adder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ripple_carry_adder_ripple_carry_adder,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.809000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=9,HLS_SYN_LUT=114,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal carry_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal carry_1_reg_102 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_56 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln7_fu_132_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_fu_60 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal or_ln6_fu_203_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln8_fu_141_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln8_fu_145_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln8_1_fu_154_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln8_fu_150_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln8_1_fu_159_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_1_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln6_fu_181_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln6_fu_175_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln6_2_fu_191_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln6_1_fu_185_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln6_fu_197_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln9_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    carry_1_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                carry_1_reg_102 <= carry_fu_227_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                carry_1_reg_102 <= carry_in;
            end if; 
        end if;
    end process;

    empty_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_fu_60 <= sum_i;
            elsif (((icmp_ln7_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_fu_60 <= or_ln6_fu_203_p2;
            end if; 
        end if;
    end process;

    i_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_56 <= ap_const_lv2_0;
            elsif (((icmp_ln7_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_56 <= add_ln7_fu_132_p2;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln7_fu_126_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln7_fu_126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln7_fu_132_p2 <= std_logic_vector(unsigned(i_fu_56) + unsigned(ap_const_lv2_1));
    and_ln6_fu_197_p2 <= (xor_ln6_2_fu_191_p2 and empty_fu_60);
    and_ln9_1_fu_221_p2 <= (trunc_ln8_fu_150_p1 and carry_1_reg_102);
    and_ln9_fu_215_p2 <= (trunc_ln8_1_fu_159_p1 and or_ln9_fu_209_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    carry_fu_227_p2 <= (and_ln9_fu_215_p2 or and_ln9_1_fu_221_p2);
    carry_out <= carry_1_reg_102;

    carry_out_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            carry_out_ap_vld <= ap_const_logic_1;
        else 
            carry_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln7_fu_126_p2 <= "1" when (i_fu_56 = ap_const_lv2_3) else "0";
    lshr_ln8_1_fu_154_p2 <= std_logic_vector(shift_right(unsigned(b),to_integer(unsigned('0' & zext_ln8_fu_141_p1(3-1 downto 0)))));
    lshr_ln8_fu_145_p2 <= std_logic_vector(shift_right(unsigned(a),to_integer(unsigned('0' & zext_ln8_fu_141_p1(3-1 downto 0)))));
    or_ln6_fu_203_p2 <= (shl_ln6_1_fu_185_p2 or and_ln6_fu_197_p2);
    or_ln9_fu_209_p2 <= (trunc_ln8_fu_150_p1 or carry_1_reg_102);
    shl_ln6_1_fu_185_p2 <= std_logic_vector(shift_left(unsigned(zext_ln6_fu_181_p1),to_integer(unsigned('0' & zext_ln8_fu_141_p1(3-1 downto 0)))));
    shl_ln6_fu_175_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv3_1),to_integer(unsigned('0' & zext_ln8_fu_141_p1(3-1 downto 0)))));
    sum_o <= empty_fu_60;

    sum_o_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sum_o_ap_vld <= ap_const_logic_1;
        else 
            sum_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln8_1_fu_159_p1 <= lshr_ln8_1_fu_154_p2(1 - 1 downto 0);
    trunc_ln8_fu_150_p1 <= lshr_ln8_fu_145_p2(1 - 1 downto 0);
    xor_ln6_1_fu_169_p2 <= (xor_ln6_fu_163_p2 xor trunc_ln8_1_fu_159_p1);
    xor_ln6_2_fu_191_p2 <= (shl_ln6_fu_175_p2 xor ap_const_lv3_7);
    xor_ln6_fu_163_p2 <= (trunc_ln8_fu_150_p1 xor carry_1_reg_102);
    zext_ln6_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln6_1_fu_169_p2),3));
    zext_ln8_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_56),3));
end behav;
