// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="wrapper_function_wrapper_function,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.139667,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=574,HLS_VERSION=2023_2}" *)

module wrapper_function (
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_bool,
        B_bool,
        A_int,
        B_int,
        op,
        result_bool,
        result_bool_ap_vld,
        result_int,
        result_int_ap_vld
);


input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] A_bool;
input  [0:0] B_bool;
input  [31:0] A_int;
input  [31:0] B_int;
input  [31:0] op;
output  [0:0] result_bool;
output   result_bool_ap_vld;
output  [31:0] result_int;
output   result_int_ap_vld;

reg result_bool_ap_vld;
reg result_int_ap_vld;

wire   [0:0] and_ln7_fu_100_p2;
wire   [2:0] trunc_ln40_fu_96_p1;
wire   [0:0] icmp_ln5_fu_124_p2;
wire   [0:0] xor_ln13_fu_118_p2;
wire   [0:0] icmp_ln5_3_fu_148_p2;
wire   [0:0] or_ln9_fu_106_p2;
wire   [0:0] icmp_ln5_2_fu_142_p2;
wire   [0:0] icmp_ln5_1_fu_136_p2;
wire   [0:0] xor_ln11_fu_112_p2;
wire   [0:0] and_ln5_fu_130_p2;
wire   [0:0] or_ln5_fu_162_p2;
wire   [0:0] select_ln5_fu_154_p3;
wire   [0:0] select_ln5_1_fu_168_p3;
wire   [31:0] and_ln23_fu_185_p2;
wire   [31:0] or_ln25_fu_197_p2;
wire   [31:0] xor_ln27_fu_203_p2;
wire   [31:0] xor_ln29_fu_209_p2;
wire   [31:0] shl_ln31_fu_215_p2;
wire   [0:0] icmp_ln21_1_fu_227_p2;
wire   [0:0] icmp_ln21_fu_221_p2;
wire   [31:0] ashr_ln33_fu_191_p2;
wire   [0:0] or_ln21_fu_241_p2;
wire   [31:0] select_ln21_fu_233_p3;
wire   [31:0] select_ln21_1_fu_247_p3;
wire   [0:0] or_ln21_1_fu_255_p2;
wire   [0:0] or_ln21_2_fu_277_p2;
wire   [31:0] select_ln21_3_fu_269_p3;
wire   [31:0] select_ln21_2_fu_261_p3;
wire    ap_ce_reg;

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        result_bool_ap_vld = 1'b1;
    end else begin
        result_bool_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        result_int_ap_vld = 1'b1;
    end else begin
        result_int_ap_vld = 1'b0;
    end
end

assign and_ln23_fu_185_p2 = (B_int & A_int);

assign and_ln5_fu_130_p2 = (xor_ln13_fu_118_p2 & icmp_ln5_fu_124_p2);

assign and_ln7_fu_100_p2 = (B_bool & A_bool);

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

assign ashr_ln33_fu_191_p2 = $signed(A_int) >>> B_int;

assign icmp_ln21_1_fu_227_p2 = ((trunc_ln40_fu_96_p1 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_221_p2 = ((trunc_ln40_fu_96_p1 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln5_1_fu_136_p2 = ((trunc_ln40_fu_96_p1 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln5_2_fu_142_p2 = ((trunc_ln40_fu_96_p1 == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln5_3_fu_148_p2 = ((trunc_ln40_fu_96_p1 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln5_fu_124_p2 = ((trunc_ln40_fu_96_p1 == 3'd3) ? 1'b1 : 1'b0);

assign or_ln21_1_fu_255_p2 = (icmp_ln5_fu_124_p2 | icmp_ln21_1_fu_227_p2);

assign or_ln21_2_fu_277_p2 = (or_ln21_fu_241_p2 | or_ln21_1_fu_255_p2);

assign or_ln21_fu_241_p2 = (icmp_ln5_2_fu_142_p2 | icmp_ln5_1_fu_136_p2);

assign or_ln25_fu_197_p2 = (B_int | A_int);

assign or_ln5_fu_162_p2 = (icmp_ln5_3_fu_148_p2 | icmp_ln5_2_fu_142_p2);

assign or_ln9_fu_106_p2 = (B_bool | A_bool);

assign result_bool = ((or_ln5_fu_162_p2[0:0] == 1'b1) ? select_ln5_fu_154_p3 : select_ln5_1_fu_168_p3);

assign result_int = ((or_ln21_2_fu_277_p2[0:0] == 1'b1) ? select_ln21_3_fu_269_p3 : select_ln21_2_fu_261_p3);

assign select_ln21_1_fu_247_p3 = ((icmp_ln5_fu_124_p2[0:0] == 1'b1) ? xor_ln29_fu_209_p2 : shl_ln31_fu_215_p2);

assign select_ln21_2_fu_261_p3 = ((icmp_ln21_fu_221_p2[0:0] == 1'b1) ? ashr_ln33_fu_191_p2 : and_ln23_fu_185_p2);

assign select_ln21_3_fu_269_p3 = ((or_ln21_fu_241_p2[0:0] == 1'b1) ? select_ln21_fu_233_p3 : select_ln21_1_fu_247_p3);

assign select_ln21_fu_233_p3 = ((icmp_ln5_2_fu_142_p2[0:0] == 1'b1) ? or_ln25_fu_197_p2 : xor_ln27_fu_203_p2);

assign select_ln5_1_fu_168_p3 = ((icmp_ln5_1_fu_136_p2[0:0] == 1'b1) ? xor_ln11_fu_112_p2 : and_ln5_fu_130_p2);

assign select_ln5_fu_154_p3 = ((icmp_ln5_3_fu_148_p2[0:0] == 1'b1) ? and_ln7_fu_100_p2 : or_ln9_fu_106_p2);

assign shl_ln31_fu_215_p2 = A_int << B_int;

assign trunc_ln40_fu_96_p1 = op[2:0];

assign xor_ln11_fu_112_p2 = (B_bool ^ A_bool);

assign xor_ln13_fu_118_p2 = (1'd1 ^ and_ln7_fu_100_p2);

assign xor_ln27_fu_203_p2 = (B_int ^ A_int);

assign xor_ln29_fu_209_p2 = (32'd4294967295 ^ and_ln23_fu_185_p2);

endmodule //wrapper_function
