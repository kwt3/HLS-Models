// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="perform_logic_operation_perform_logic_operation,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.236000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=95,HLS_VERSION=2023_2}" *)

module perform_logic_operation (
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A,
        B,
        op,
        ap_return
);


input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] A;
input  [0:0] B;
input  [31:0] op;
output  [0:0] ap_return;

wire   [0:0] and_ln6_fu_64_p2;
wire   [1:0] zext_ln16_fu_70_p1;
wire   [1:0] zext_ln16_1_fu_74_p1;
wire   [1:0] shl_ln14_fu_102_p2;
wire   [2:0] empty_fu_60_p1;
wire   [0:0] icmp_ln4_4_fu_138_p2;
wire   [0:0] or_ln8_fu_84_p2;
wire   [0:0] xor_ln10_fu_90_p2;
wire   [0:0] icmp_ln4_3_fu_132_p2;
wire   [0:0] icmp_ln4_2_fu_126_p2;
wire   [0:0] xor_ln12_fu_96_p2;
wire   [0:0] icmp_ln14_fu_108_p2;
wire   [0:0] icmp_ln4_1_fu_120_p2;
wire   [0:0] icmp_ln4_fu_114_p2;
wire   [0:0] lshr_ln16_fu_78_p2;
wire   [0:0] or_ln4_fu_152_p2;
wire   [0:0] select_ln4_fu_144_p3;
wire   [0:0] select_ln4_1_fu_158_p3;
wire   [0:0] or_ln4_1_fu_166_p2;
wire   [0:0] or_ln4_2_fu_188_p2;
wire   [0:0] select_ln4_3_fu_180_p3;
wire   [0:0] select_ln4_2_fu_172_p3;
wire    ap_ce_reg;

assign and_ln6_fu_64_p2 = (B & A);

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

assign ap_return = ((or_ln4_2_fu_188_p2[0:0] == 1'b1) ? select_ln4_3_fu_180_p3 : select_ln4_2_fu_172_p3);

assign empty_fu_60_p1 = op[2:0];

assign icmp_ln14_fu_108_p2 = ((shl_ln14_fu_102_p2 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln4_1_fu_120_p2 = ((empty_fu_60_p1 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln4_2_fu_126_p2 = ((empty_fu_60_p1 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln4_3_fu_132_p2 = ((empty_fu_60_p1 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln4_4_fu_138_p2 = ((empty_fu_60_p1 == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_114_p2 = ((empty_fu_60_p1 == 3'd5) ? 1'b1 : 1'b0);

assign lshr_ln16_fu_78_p2 = A >> B;

assign or_ln4_1_fu_166_p2 = (icmp_ln4_2_fu_126_p2 | icmp_ln4_1_fu_120_p2);

assign or_ln4_2_fu_188_p2 = (or_ln4_fu_152_p2 | or_ln4_1_fu_166_p2);

assign or_ln4_fu_152_p2 = (icmp_ln4_4_fu_138_p2 | icmp_ln4_3_fu_132_p2);

assign or_ln8_fu_84_p2 = (B | A);

assign select_ln4_1_fu_158_p3 = ((icmp_ln4_2_fu_126_p2[0:0] == 1'b1) ? xor_ln12_fu_96_p2 : icmp_ln14_fu_108_p2);

assign select_ln4_2_fu_172_p3 = ((icmp_ln4_fu_114_p2[0:0] == 1'b1) ? lshr_ln16_fu_78_p2 : and_ln6_fu_64_p2);

assign select_ln4_3_fu_180_p3 = ((or_ln4_fu_152_p2[0:0] == 1'b1) ? select_ln4_fu_144_p3 : select_ln4_1_fu_158_p3);

assign select_ln4_fu_144_p3 = ((icmp_ln4_4_fu_138_p2[0:0] == 1'b1) ? or_ln8_fu_84_p2 : xor_ln10_fu_90_p2);

assign shl_ln14_fu_102_p2 = zext_ln16_fu_70_p1 << zext_ln16_1_fu_74_p1;

assign xor_ln10_fu_90_p2 = (B ^ A);

assign xor_ln12_fu_96_p2 = (1'd1 ^ and_ln6_fu_64_p2);

assign zext_ln16_1_fu_74_p1 = B;

assign zext_ln16_fu_70_p1 = A;

endmodule //perform_logic_operation
