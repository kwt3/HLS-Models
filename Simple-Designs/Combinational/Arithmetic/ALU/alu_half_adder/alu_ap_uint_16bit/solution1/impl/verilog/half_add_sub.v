// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="half_add_sub_half_add_sub,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.983000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=62,HLS_VERSION=2023_2}" *)

module half_add_sub (
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A,
        B,
        sum,
        sum_ap_vld,
        carry,
        carry_ap_vld,
        op
);


input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] A;
input  [15:0] B;
output  [15:0] sum;
output   sum_ap_vld;
output  [15:0] carry;
output   carry_ap_vld;
input  [31:0] op;

reg sum_ap_vld;
reg[15:0] carry;
reg carry_ap_vld;

wire   [31:0] op_read_read_fu_36_p2;
wire   [15:0] xor_ln12_fu_75_p2;
wire   [15:0] and_ln8_fu_82_p2;
wire    ap_ce_reg;

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        if ((op_read_read_fu_36_p2 == 32'd0)) begin
            carry = and_ln8_fu_82_p2;
        end else if ((op_read_read_fu_36_p2 == 32'd1)) begin
            carry = xor_ln12_fu_75_p2;
        end else begin
            carry = 'bx;
        end
    end else begin
        carry = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (op_read_read_fu_36_p2 == 32'd0)) | ((ap_start == 1'b1) & (op_read_read_fu_36_p2 == 32'd1)))) begin
        carry_ap_vld = 1'b1;
    end else begin
        carry_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (op_read_read_fu_36_p2 == 32'd0)) | ((ap_start == 1'b1) & (op_read_read_fu_36_p2 == 32'd1)))) begin
        sum_ap_vld = 1'b1;
    end else begin
        sum_ap_vld = 1'b0;
    end
end

assign and_ln8_fu_82_p2 = (B & A);

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

assign op_read_read_fu_36_p2 = op;

assign sum = (B ^ A);

assign xor_ln12_fu_75_p2 = (16'd65535 ^ B);

endmodule //half_add_sub
