// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="clock_clock,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.286286,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=26,HLS_SYN_LUT=232,HLS_VERSION=2023_2}" *)

module clock (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        reset,
        ena,
        hh,
        hh_ap_vld,
        mm,
        mm_ap_vld,
        ss,
        ss_ap_vld,
        pm,
        pm_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] reset;
input  [0:0] ena;
output  [7:0] hh;
output   hh_ap_vld;
output  [7:0] mm;
output   mm_ap_vld;
output  [7:0] ss;
output   ss_ap_vld;
output  [0:0] pm;
output   pm_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg hh_ap_vld;
reg mm_ap_vld;
reg ss_ap_vld;
reg pm_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] hours;
reg   [7:0] minutes;
reg   [7:0] seconds;
reg   [0:0] pm_indicator;
reg   [0:0] ap_phi_mux_pm_indicator_loc_0_phi_fu_99_p4;
wire   [0:0] reset_read_read_fu_56_p2;
wire   [0:0] ena_read_read_fu_62_p2;
wire   [0:0] icmp_ln19_fu_291_p2;
wire   [0:0] icmp_ln22_fu_304_p2;
wire   [7:0] hours_load_load_fu_257_p1;
wire   [0:0] xor_ln28_fu_317_p2;
reg   [0:0] ap_phi_mux_hours_flag_4_phi_fu_108_p12;
reg   [7:0] ap_phi_mux_hours_new_4_phi_fu_131_p12;
wire   [7:0] add_ln24_fu_310_p2;
reg   [0:0] ap_phi_mux_minutes_flag_3_phi_fu_151_p12;
reg   [7:0] ap_phi_mux_minutes_new_3_phi_fu_174_p12;
wire   [7:0] add_ln21_fu_297_p2;
reg   [0:0] ap_phi_mux_seconds_flag_2_phi_fu_195_p12;
reg   [7:0] ap_phi_mux_seconds_new_2_phi_fu_218_p12;
wire   [7:0] add_ln18_fu_284_p2;
reg   [0:0] ap_phi_mux_pm_indicator_loc_5_phi_fu_240_p12;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_condition_174;
reg    ap_condition_66;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 hours = 8'd12;
#0 minutes = 8'd0;
#0 seconds = 8'd0;
#0 pm_indicator = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((reset_read_read_fu_56_p2 == 1'd1)) begin
            pm_indicator <= 1'd0;
        end else if ((1'b1 == ap_condition_66)) begin
            pm_indicator <= xor_ln28_fu_317_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (ap_phi_mux_hours_flag_4_phi_fu_108_p12 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        hours <= ap_phi_mux_hours_new_4_phi_fu_131_p12;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_phi_mux_minutes_flag_3_phi_fu_151_p12 == 1'd1))) begin
        minutes <= ap_phi_mux_minutes_new_3_phi_fu_174_p12;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_phi_mux_seconds_flag_2_phi_fu_195_p12 == 1'd1))) begin
        seconds <= ap_phi_mux_seconds_new_2_phi_fu_218_p12;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln22_fu_304_p2 == 1'd0) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln19_fu_291_p2 == 1'd0) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ena_read_read_fu_62_p2 == 1'd0) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_hours_flag_4_phi_fu_108_p12 = 1'd0;
    end else if ((((reset_read_read_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | (~(hours_load_load_fu_257_p1 == 8'd12) & (icmp_ln22_fu_304_p2 == 1'd1) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((hours_load_load_fu_257_p1 == 8'd12) & (icmp_ln22_fu_304_p2 == 1'd1) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_hours_flag_4_phi_fu_108_p12 = 1'd1;
    end else begin
        ap_phi_mux_hours_flag_4_phi_fu_108_p12 = 'bx;
    end
end

always @ (*) begin
    if ((~(hours_load_load_fu_257_p1 == 8'd12) & (icmp_ln22_fu_304_p2 == 1'd1) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_hours_new_4_phi_fu_131_p12 = add_ln24_fu_310_p2;
    end else if ((((icmp_ln22_fu_304_p2 == 1'd0) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln19_fu_291_p2 == 1'd0) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ena_read_read_fu_62_p2 == 1'd0) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_hours_new_4_phi_fu_131_p12 = hours;
    end else if (((reset_read_read_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_hours_new_4_phi_fu_131_p12 = 8'd12;
    end else if (((hours_load_load_fu_257_p1 == 8'd12) & (icmp_ln22_fu_304_p2 == 1'd1) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_hours_new_4_phi_fu_131_p12 = 8'd1;
    end else begin
        ap_phi_mux_hours_new_4_phi_fu_131_p12 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln19_fu_291_p2 == 1'd0) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ena_read_read_fu_62_p2 == 1'd0) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_minutes_flag_3_phi_fu_151_p12 = 1'd0;
    end else if ((((icmp_ln22_fu_304_p2 == 1'd0) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((reset_read_read_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | (~(hours_load_load_fu_257_p1 == 8'd12) & (icmp_ln22_fu_304_p2 == 1'd1) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((hours_load_load_fu_257_p1 == 8'd12) & (icmp_ln22_fu_304_p2 == 1'd1) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_minutes_flag_3_phi_fu_151_p12 = 1'd1;
    end else begin
        ap_phi_mux_minutes_flag_3_phi_fu_151_p12 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_304_p2 == 1'd0) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_minutes_new_3_phi_fu_174_p12 = add_ln21_fu_297_p2;
    end else if ((((icmp_ln19_fu_291_p2 == 1'd0) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ena_read_read_fu_62_p2 == 1'd0) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_minutes_new_3_phi_fu_174_p12 = minutes;
    end else if ((((reset_read_read_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | (~(hours_load_load_fu_257_p1 == 8'd12) & (icmp_ln22_fu_304_p2 == 1'd1) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((hours_load_load_fu_257_p1 == 8'd12) & (icmp_ln22_fu_304_p2 == 1'd1) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_minutes_new_3_phi_fu_174_p12 = 8'd0;
    end else begin
        ap_phi_mux_minutes_new_3_phi_fu_174_p12 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_174)) begin
        if ((hours_load_load_fu_257_p1 == 8'd11)) begin
            ap_phi_mux_pm_indicator_loc_0_phi_fu_99_p4 = xor_ln28_fu_317_p2;
        end else if ((~(hours_load_load_fu_257_p1 == 8'd11) & ~(hours_load_load_fu_257_p1 == 8'd12))) begin
            ap_phi_mux_pm_indicator_loc_0_phi_fu_99_p4 = pm_indicator;
        end else begin
            ap_phi_mux_pm_indicator_loc_0_phi_fu_99_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_pm_indicator_loc_0_phi_fu_99_p4 = 'bx;
    end
end

always @ (*) begin
    if ((~(hours_load_load_fu_257_p1 == 8'd12) & (icmp_ln22_fu_304_p2 == 1'd1) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_pm_indicator_loc_5_phi_fu_240_p12 = ap_phi_mux_pm_indicator_loc_0_phi_fu_99_p4;
    end else if (((reset_read_read_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_pm_indicator_loc_5_phi_fu_240_p12 = 1'd0;
    end else if ((((icmp_ln22_fu_304_p2 == 1'd0) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln19_fu_291_p2 == 1'd0) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ena_read_read_fu_62_p2 == 1'd0) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((hours_load_load_fu_257_p1 == 8'd12) & (icmp_ln22_fu_304_p2 == 1'd1) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_pm_indicator_loc_5_phi_fu_240_p12 = pm_indicator;
    end else begin
        ap_phi_mux_pm_indicator_loc_5_phi_fu_240_p12 = 'bx;
    end
end

always @ (*) begin
    if (((ena_read_read_fu_62_p2 == 1'd0) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_seconds_flag_2_phi_fu_195_p12 = 1'd0;
    end else if ((((icmp_ln22_fu_304_p2 == 1'd0) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln19_fu_291_p2 == 1'd0) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((reset_read_read_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | (~(hours_load_load_fu_257_p1 == 8'd12) & (icmp_ln22_fu_304_p2 == 1'd1) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((hours_load_load_fu_257_p1 == 8'd12) & (icmp_ln22_fu_304_p2 == 1'd1) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_seconds_flag_2_phi_fu_195_p12 = 1'd1;
    end else begin
        ap_phi_mux_seconds_flag_2_phi_fu_195_p12 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_291_p2 == 1'd0) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_seconds_new_2_phi_fu_218_p12 = add_ln18_fu_284_p2;
    end else if (((ena_read_read_fu_62_p2 == 1'd0) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_seconds_new_2_phi_fu_218_p12 = seconds;
    end else if ((((icmp_ln22_fu_304_p2 == 1'd0) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((reset_read_read_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | (~(hours_load_load_fu_257_p1 == 8'd12) & (icmp_ln22_fu_304_p2 == 1'd1) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((hours_load_load_fu_257_p1 == 8'd12) & (icmp_ln22_fu_304_p2 == 1'd1) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_seconds_new_2_phi_fu_218_p12 = 8'd0;
    end else begin
        ap_phi_mux_seconds_new_2_phi_fu_218_p12 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        hh_ap_vld = 1'b1;
    end else begin
        hh_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mm_ap_vld = 1'b1;
    end else begin
        mm_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        pm_ap_vld = 1'b1;
    end else begin
        pm_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ss_ap_vld = 1'b1;
    end else begin
        ss_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_284_p2 = (seconds + 8'd1);

assign add_ln21_fu_297_p2 = (minutes + 8'd1);

assign add_ln24_fu_310_p2 = (hours + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_condition_174 = ((icmp_ln22_fu_304_p2 == 1'd1) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1));
end

always @ (*) begin
    ap_condition_66 = ((hours_load_load_fu_257_p1 == 8'd11) & (icmp_ln22_fu_304_p2 == 1'd1) & (icmp_ln19_fu_291_p2 == 1'd1) & (ena_read_read_fu_62_p2 == 1'd1) & (reset_read_read_fu_56_p2 == 1'd0));
end

assign ena_read_read_fu_62_p2 = ena;

assign hh = ap_phi_mux_hours_new_4_phi_fu_131_p12;

assign hours_load_load_fu_257_p1 = hours;

assign icmp_ln19_fu_291_p2 = ((add_ln18_fu_284_p2 == 8'd60) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_304_p2 = ((add_ln21_fu_297_p2 == 8'd60) ? 1'b1 : 1'b0);

assign mm = ap_phi_mux_minutes_new_3_phi_fu_174_p12;

assign pm = ap_phi_mux_pm_indicator_loc_5_phi_fu_240_p12;

assign reset_read_read_fu_56_p2 = reset;

assign ss = ap_phi_mux_seconds_new_2_phi_fu_218_p12;

assign xor_ln28_fu_317_p2 = (pm_indicator ^ 1'd1);

endmodule //clock
