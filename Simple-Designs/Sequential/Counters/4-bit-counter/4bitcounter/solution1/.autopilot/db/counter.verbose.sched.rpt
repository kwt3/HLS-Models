

================================================================
== Vitis HLS Report for 'counter'
================================================================
* Date:           Sun Jun  2 23:18:15 2024

* Version:        2023.2 (Build 4023990 on Oct 11 2023)
* Project:        4bitcounter
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: virtexuplus
* Target device:  xcvu11p-flga2577-1-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  1.417 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |        0|        0|      0 ns|      0 ns|    1|    1|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 0
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 1
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.41>
ST_1 : Operation 2 [1/1] (0.00ns)   --->   "%spectopmodule_ln3 = spectopmodule void @_ssdm_op_SpecTopModule, void @empty_1" [4bitcounter.cpp:3]   --->   Operation 2 'spectopmodule' 'spectopmodule_ln3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 3 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %reset"   --->   Operation 3 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i1 %reset, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 4 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i4 %out_r"   --->   Operation 5 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i4 %out_r, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 6 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%reset_read = read i1 @_ssdm_op_Read.ap_auto.i1P0A, i1 %reset" [4bitcounter.cpp:8]   --->   Operation 7 'read' 'reset_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%br_ln8 = br i1 %reset_read, void %if.else, void %if.then" [4bitcounter.cpp:8]   --->   Operation 8 'br' 'br_ln8' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%count_load = load i4 %count" [4bitcounter.cpp:11]   --->   Operation 9 'load' 'count_load' <Predicate = (!reset_read)> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.80ns)   --->   "%icmp_ln11 = icmp_eq  i4 %count_load, i4 15" [4bitcounter.cpp:11]   --->   Operation 10 'icmp' 'icmp_ln11' <Predicate = (!reset_read)> <Delay = 0.80> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.80> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%br_ln11 = br i1 %icmp_ln11, void %if.else4, void %if.then2" [4bitcounter.cpp:11]   --->   Operation 11 'br' 'br_ln11' <Predicate = (!reset_read)> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.80ns)   --->   "%add_ln14 = add i4 %count_load, i4 1" [4bitcounter.cpp:14]   --->   Operation 12 'add' 'add_ln14' <Predicate = (!reset_read & !icmp_ln11)> <Delay = 0.80> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.80> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 13 [1/1] (0.46ns)   --->   "%store_ln14 = store i4 %add_ln14, i4 %count" [4bitcounter.cpp:14]   --->   Operation 13 'store' 'store_ln14' <Predicate = (!reset_read & !icmp_ln11)> <Delay = 0.46>
ST_1 : Operation 14 [1/1] (0.46ns)   --->   "%br_ln0 = br void %if.end5"   --->   Operation 14 'br' 'br_ln0' <Predicate = (!reset_read & !icmp_ln11)> <Delay = 0.46>
ST_1 : Operation 15 [1/1] (0.46ns)   --->   "%store_ln12 = store i4 0, i4 %count" [4bitcounter.cpp:12]   --->   Operation 15 'store' 'store_ln12' <Predicate = (!reset_read & icmp_ln11)> <Delay = 0.46>
ST_1 : Operation 16 [1/1] (0.46ns)   --->   "%br_ln13 = br void %if.end5" [4bitcounter.cpp:13]   --->   Operation 16 'br' 'br_ln13' <Predicate = (!reset_read & icmp_ln11)> <Delay = 0.46>
ST_1 : Operation 17 [1/1] (0.46ns)   --->   "%store_ln9 = store i4 0, i4 %count" [4bitcounter.cpp:9]   --->   Operation 17 'store' 'store_ln9' <Predicate = (reset_read)> <Delay = 0.46>
ST_1 : Operation 18 [1/1] (0.46ns)   --->   "%br_ln10 = br void %if.end5" [4bitcounter.cpp:10]   --->   Operation 18 'br' 'br_ln10' <Predicate = (reset_read)> <Delay = 0.46>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%p_0_0_0 = phi i4 0, void %if.then, i4 %add_ln14, void %if.else4, i4 0, void %if.then2" [4bitcounter.cpp:14]   --->   Operation 19 'phi' 'p_0_0_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%write_ln19 = write void @_ssdm_op_Write.ap_auto.i4P0A, i4 %out_r, i4 %p_0_0_0" [4bitcounter.cpp:19]   --->   Operation 20 'write' 'write_ln19' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%ret_ln20 = ret" [4bitcounter.cpp:20]   --->   Operation 21 'ret' 'ret_ln20' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 1.417ns
The critical path consists of the following:
	'load' operation 4 bit ('count_load', 4bitcounter.cpp:11) on static variable 'count' [12]  (0.000 ns)
	'add' operation 4 bit ('add_ln14', 4bitcounter.cpp:14) [16]  (0.809 ns)
	multiplexor before 'phi' operation 4 bit ('p_0_0_0', 4bitcounter.cpp:14) with incoming values : ('add_ln14', 4bitcounter.cpp:14) [26]  (0.460 ns)
	'phi' operation 4 bit ('p_0_0_0', 4bitcounter.cpp:14) with incoming values : ('add_ln14', 4bitcounter.cpp:14) [26]  (0.000 ns)
	blocking operation 0.148 ns on control path)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
