-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shift_register is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    areset : IN STD_LOGIC_VECTOR (0 downto 0);
    load : IN STD_LOGIC_VECTOR (0 downto 0);
    ena : IN STD_LOGIC_VECTOR (0 downto 0);
    data : IN STD_LOGIC_VECTOR (3 downto 0);
    q : OUT STD_LOGIC_VECTOR (3 downto 0);
    q_ap_vld : OUT STD_LOGIC );
end;


architecture behav of shift_register is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "shift_register_shift_register,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.650143,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5,HLS_SYN_LUT=44,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_r : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_phi_mux_reg_loc_2_phi_fu_76_p8 : STD_LOGIC_VECTOR (3 downto 0);
    signal areset_read_read_fu_42_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal load_read_read_fu_48_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln15_fu_104_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ena_read_read_fu_54_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_fu_94_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_condition_51 : BOOLEAN;
    signal ap_condition_56 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    reg_r_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((areset_read_read_fu_42_p2 = ap_const_lv1_1)) then 
                    reg_r <= ap_const_lv4_0;
                elsif (((load_read_read_fu_48_p2 = ap_const_lv1_1) and (areset_read_read_fu_42_p2 = ap_const_lv1_0))) then 
                    reg_r <= data;
                elsif ((ap_const_boolean_1 = ap_condition_51)) then 
                    reg_r <= zext_ln15_fu_104_p1;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_51_assign_proc : process(areset_read_read_fu_42_p2, load_read_read_fu_48_p2, ena_read_read_fu_54_p2)
    begin
                ap_condition_51 <= ((ena_read_read_fu_54_p2 = ap_const_lv1_1) and (load_read_read_fu_48_p2 = ap_const_lv1_0) and (areset_read_read_fu_42_p2 = ap_const_lv1_0));
    end process;


    ap_condition_56_assign_proc : process(areset_read_read_fu_42_p2, load_read_read_fu_48_p2, ena_read_read_fu_54_p2)
    begin
                ap_condition_56 <= ((ena_read_read_fu_54_p2 = ap_const_lv1_0) and (load_read_read_fu_48_p2 = ap_const_lv1_0) and (areset_read_read_fu_42_p2 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_reg_loc_2_phi_fu_76_p8_assign_proc : process(ap_CS_fsm_state1, data, reg_r, areset_read_read_fu_42_p2, load_read_read_fu_48_p2, zext_ln15_fu_104_p1, ap_condition_51, ap_condition_56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_boolean_1 = ap_condition_56)) then 
                ap_phi_mux_reg_loc_2_phi_fu_76_p8 <= reg_r;
            elsif ((ap_const_boolean_1 = ap_condition_51)) then 
                ap_phi_mux_reg_loc_2_phi_fu_76_p8 <= zext_ln15_fu_104_p1;
            elsif (((load_read_read_fu_48_p2 = ap_const_lv1_1) and (areset_read_read_fu_42_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_reg_loc_2_phi_fu_76_p8 <= data;
            elsif ((areset_read_read_fu_42_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_reg_loc_2_phi_fu_76_p8 <= ap_const_lv4_0;
            else 
                ap_phi_mux_reg_loc_2_phi_fu_76_p8 <= "XXXX";
            end if;
        else 
            ap_phi_mux_reg_loc_2_phi_fu_76_p8 <= "XXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    areset_read_read_fu_42_p2 <= areset;
    ena_read_read_fu_54_p2 <= ena;
    load_read_read_fu_48_p2 <= load;
    lshr_ln_fu_94_p4 <= reg_r(3 downto 1);
    q <= ap_phi_mux_reg_loc_2_phi_fu_76_p8;

    q_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            q_ap_vld <= ap_const_logic_1;
        else 
            q_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln15_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_94_p4),4));
end behav;
